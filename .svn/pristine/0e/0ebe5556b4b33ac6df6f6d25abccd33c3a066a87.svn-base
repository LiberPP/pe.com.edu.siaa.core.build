package pe.com.edu.siaa.core.model.jpa.nota;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import pe.com.edu.siaa.core.model.jpa.matricula.Matricula;
import pe.com.edu.siaa.core.model.util.ConfiguracionEntityManagerUtil;

/**
 * La Class RegistroNota.
 * <ul>
 * <li>Copyright 2017 ndavilal -
 * ndavilal. Todos los derechos reservados.</li>
 * </ul>
 *
 * @author ndavilal
 * @version 2.1, Tue Apr 18 09:56:56 COT 2017
 * @since SIAA-CORE 2.1
 */
@Entity
@Table(name = "RegistroNota", schema = ConfiguracionEntityManagerUtil.ESQUEMA_ACADEMICO)
public class RegistroNota implements Serializable {
 
    /** La Constant serialVersionUID. */
    private static final long serialVersionUID = 1L;
   
    /** El id registro nota. */
    @Id
    @Column(name = "idRegistroNota" , length = 15)
    private String idRegistroNota;
   
    /** El matricula. */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idMatricula", referencedColumnName = "idMatricula")
    private Matricula matricula;
   
    /** El nota final. */
    @Column(name = "notaFinal")
    private BigDecimal notaFinal;
   
    /** El usuario creacion. */
    @Column(name = "usuarioCreacion" , length = 50)
    private String usuarioCreacion;
   
    /** El fecha creacion. */
    @Temporal( TemporalType.TIMESTAMP)
    @Column(name = "fechaCreacion")
    private Date fechaCreacion;
   
    /** El usuario modificacion. */
    @Column(name = "usuarioModificacion" , length = 50)
    private String usuarioModificacion;
   
    /** El fecha modificacion. */
    @Temporal( TemporalType.TIMESTAMP)
    @Column(name = "fechaModificacion")
    private Date fechaModificacion;
   
    /** El registro nota det registro nota list. */
    @OneToMany(mappedBy = "registroNota", fetch = FetchType.LAZY)
    private List<DetRegistroNota> registroNotaDetRegistroNotaList = new ArrayList<DetRegistroNota>();
    
    /**
     * Instancia un nuevo registro nota.
     */
    public RegistroNota() {
    }
   
   
    /**
     * Instancia un nuevo registro nota.
     *
     * @param idRegistroNota el id registro nota
     * @param matricula el matricula
     * @param notaFinal el nota final
     * @param usuarioCreacion el usuario creacion
     * @param fechaCreacion el fecha creacion
     * @param usuarioModificacion el usuario modificacion
     * @param fechaModificacion el fecha modificacion
     */
    public RegistroNota(String idRegistroNota, Matricula matricula,BigDecimal notaFinal, String usuarioCreacion, Date fechaCreacion, String usuarioModificacion, Date fechaModificacion ) {
        super();
        this.idRegistroNota = idRegistroNota;
        this.matricula = matricula;
        this.notaFinal = notaFinal;
        this.usuarioCreacion = usuarioCreacion;
        this.fechaCreacion = fechaCreacion;
        this.usuarioModificacion = usuarioModificacion;
        this.fechaModificacion = fechaModificacion;
    }
   
    //get y set
    /**
     * Obtiene id registro nota.
     *
     * @return id registro nota
     */
     public String getIdRegistroNota() {
        return this.idRegistroNota;
    }
    /**
     * Establece el id registro nota.
     *
     * @param idRegistroNota el new id registro nota
     */
    public void setIdRegistroNota(String idRegistroNota) {
        this.idRegistroNota = idRegistroNota;
    }
    /**
     * Obtiene matricula.
     *
     * @return matricula
     */
     public Matricula getMatricula() {
        return this.matricula;
    }
    /**
     * Establece el matricula.
     *
     * @param matricula el new matricula
     */
    public void setMatricula(Matricula matricula) {
        this.matricula = matricula;
    }
    /**
     * Obtiene nota final.
     *
     * @return nota final
     */
     public BigDecimal getNotaFinal() {
        return this.notaFinal;
    }
    /**
     * Establece el nota final.
     *
     * @param notaFinal el new nota final
     */
    public void setNotaFinal(BigDecimal notaFinal) {
        this.notaFinal = notaFinal;
    }
    /**
     * Obtiene usuario creacion.
     *
     * @return usuario creacion
     */
     public String getUsuarioCreacion() {
        return this.usuarioCreacion;
    }
    /**
     * Establece el usuario creacion.
     *
     * @param usuarioCreacion el new usuario creacion
     */
    public void setUsuarioCreacion(String usuarioCreacion) {
        this.usuarioCreacion = usuarioCreacion;
    }
    /**
     * Obtiene fecha creacion.
     *
     * @return fecha creacion
     */
     public Date getFechaCreacion() {
        return this.fechaCreacion;
    }
    /**
     * Establece el fecha creacion.
     *
     * @param fechaCreacion el new fecha creacion
     */
    public void setFechaCreacion(Date fechaCreacion) {
        this.fechaCreacion = fechaCreacion;
    }
    /**
     * Obtiene usuario modificacion.
     *
     * @return usuario modificacion
     */
     public String getUsuarioModificacion() {
        return this.usuarioModificacion;
    }
    /**
     * Establece el usuario modificacion.
     *
     * @param usuarioModificacion el new usuario modificacion
     */
    public void setUsuarioModificacion(String usuarioModificacion) {
        this.usuarioModificacion = usuarioModificacion;
    }
    /**
     * Obtiene fecha modificacion.
     *
     * @return fecha modificacion
     */
     public Date getFechaModificacion() {
        return this.fechaModificacion;
    }
    /**
     * Establece el fecha modificacion.
     *
     * @param fechaModificacion el new fecha modificacion
     */
    public void setFechaModificacion(Date fechaModificacion) {
        this.fechaModificacion = fechaModificacion;
    }
    /**
     * Establece el registro nota det registro nota list.
     *
     * @param registroNotaDetRegistroNotaList el new registro nota det registro nota list
     */
    public List<DetRegistroNota> getRegistroNotaDetRegistroNotaList(){
        return this.registroNotaDetRegistroNotaList;
    }
    /**
     * Establece el registro nota list.
     *
     * @param registroNotaList el new registro nota list
     */
    public void setRegistroNotaDetRegistroNotaList(List<DetRegistroNota> registroNotaDetRegistroNotaList) {
        this.registroNotaDetRegistroNotaList = registroNotaDetRegistroNotaList;
    }   
    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result
                + ((idRegistroNota == null) ? 0 : idRegistroNota.hashCode());
        return result;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        RegistroNota other = (RegistroNota) obj;
        if (idRegistroNota == null) {
            if (other.idRegistroNota != null) {
                return false;
            }
        } else if (!idRegistroNota.equals(other.idRegistroNota)) {
            return false;
        }
        return true;
    }
    
    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return "RegistroNota [idRegistroNota=" + idRegistroNota + "]";
    }
   
}