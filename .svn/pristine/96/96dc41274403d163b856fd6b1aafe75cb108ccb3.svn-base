package pe.com.edu.siaa.core.ejb.dao.nota.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.Stateless;
import javax.persistence.Query;

import pe.com.edu.siaa.core.ejb.dao.generic.impl.GenericAcademicoDAOImpl;
import pe.com.edu.siaa.core.ejb.dao.nota.local.ConceptoNotaDaoLocal;
import pe.com.edu.siaa.core.model.dto.nota.ConceptoNotaDTO;
import pe.com.edu.siaa.core.model.jpa.nota.ConceptoNota;
import pe.com.edu.siaa.core.model.util.StringUtils;

/**
 * La Class ConceptoNotaDaoImpl.
 * <ul>
 * <li>Copyright 2017 ndavilal -
 * ndavilal. Todos los derechos reservados.</li>
 * </ul>
 *
 * @author ndavilal
 * @version 2.1, Tue Apr 18 19:53:38 COT 2017
 * @since SIAA-CORE 2.1
 */
@Stateless
public class ConceptoNotaDaoImpl extends  GenericAcademicoDAOImpl<String, ConceptoNota> implements ConceptoNotaDaoLocal  {

    /* (non-Javadoc)
     * @see pe.com.edu.siaa.core.ejb.dao.seguridad.local.ConceptoNotaDaoLocal#listarConceptoNota(pe.com.edu.siaa.core.model.jpa.seguridad.ConceptoNota)
     */  
    @Override	 
    public List<ConceptoNota> listarConceptoNota(String flagObligatorio,String estado,String idDetCargaLectiva) {
    	Map<String, Object> parametros = new HashMap<String, Object>();
		boolean ejecutarQuery = false;
		StringBuilder jpaql = new StringBuilder();
		jpaql.append("from ConceptoNota cn left join fetch cn.itemByTipoNota where 1 = 1 ");
		if (StringUtils.isNotNullOrBlank(flagObligatorio)) {
			ejecutarQuery = true;
			jpaql.append(" and cn.flagObligatorio = :flagObligatorio ");
			parametros.put("flagObligatorio", flagObligatorio);
		}
		if (StringUtils.isNotNullOrBlank(estado)) {
			ejecutarQuery = true;
			jpaql.append(" and cn.estado = :estado ");
			parametros.put("estado", estado);
		}
		if (idDetCargaLectiva != null) {
			if (StringUtils.isNotNullOrBlank(idDetCargaLectiva)) {
				ejecutarQuery = true;
				jpaql.append(" and cn.detCargaLectiva.idDetCargaLectiva = :idDetCargaLectiva ");
				parametros.put("idDetCargaLectiva", idDetCargaLectiva);
			}
		}			
		jpaql.append(" order by cn.idConceptoNota ");
		if (ejecutarQuery) {		
			Query query = createQuery(jpaql.toString(), parametros);
			return query.getResultList();
		} 
		return null;
    }   
   
    @Override	 
    public List<ConceptoNota> listarConceptoNota(ConceptoNotaDTO conceptoNota) {
		Query query = generarQueryListaConceptoNota(conceptoNota, false);
		query.setFirstResult(conceptoNota.getStartRow());
        query.setMaxResults(conceptoNota.getOffset());
		return query.getResultList();
    }   
   
    /**
     * Generar query lista ConceptoNota.
     *
     * @param ConceptoNotaDTO el conceptoNota
     * @param esContador el es contador
     * @return the query
     */
    private Query generarQueryListaConceptoNota(ConceptoNotaDTO conceptoNota, boolean esContador) {
        Map<String, Object> parametros = new HashMap<String, Object>();
        StringBuilder jpaql = new StringBuilder();
        if (esContador) {
            jpaql.append(" select count(o.idConceptoNota) from ConceptoNota o where 1=1 ");
        } else {
            jpaql.append(" select o from ConceptoNota o where 1=1 ");           
        }
		if (!StringUtils.isNullOrEmpty(conceptoNota.getSearch())) {
	          jpaql.append(" and upper(o.idConceptoNota) like :search ");
	          parametros.put("search", "%" + conceptoNota.getSearch().toUpperCase() + "%");
	    } else {
			if (!StringUtils.isNullOrEmpty(conceptoNota.getDescripcion())) {
				jpaql.append(" and upper(o.descripcion) like :descripcion ");
				parametros.put("descripcion", "%" + conceptoNota.getDescripcion().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(conceptoNota.getFlagObligatorio())) {
				jpaql.append(" and upper(o.flagObligatorio) like :flagObligatorio ");
				parametros.put("flagObligatorio", "%" + conceptoNota.getFlagObligatorio().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(conceptoNota.getEstado())) {
				jpaql.append(" and upper(o.estado) like :estado ");
				parametros.put("estado", "%" + conceptoNota.getEstado().toUpperCase() + "%");
			}
		}
        if (!esContador) {
            //jpaql.append(" ORDER BY 1 ");
        }
        Query query = createQuery(jpaql.toString(), parametros);
        return query;
    }

    /* (non-Javadoc)
     * @see pe.com.edu.siaa.core.ejb.dao.seguridad.local.ConceptoNotaDaoLocal#contarListar{entity.getClassName()}(pe.com.edu.siaa.core.model.jpa.seguridad.ConceptoNotaDTO)
     */
	@Override
    public int contarListarConceptoNota(ConceptoNotaDTO conceptoNota) {
        int resultado = 0;
        try {
            //StringBuilder jpaql = new StringBuilder();
            Query query = generarQueryListaConceptoNota(conceptoNota, true);
            resultado = ((Long) query.getSingleResult()).intValue();
        } catch (Exception e) {
            resultado = 0;
        }
        return resultado;
    }
    /* (non-Javadoc)
     * @see pe.com.edu.siaa.core.ejb.dao.seguridad.local.ConceptoNotaDaoLocal#generarIdConceptoNota()
     */
	 @Override
    public String generarIdConceptoNota() {
        String resultado = "1";
        Query query = createQuery("select max(o.idConceptoNota) from ConceptoNota o", null);
        List<Object> listLong =  query.getResultList();
        if (listLong != null && listLong.size() > 0 && listLong.get(0) != null)  {
            Long ultimoIdGenerado = Long.valueOf(listLong.get(0).toString());
            if (!StringUtils.isNullOrEmpty(ultimoIdGenerado)) {
                resultado = resultado + ultimoIdGenerado;
            }
        }
        return resultado;
    }
   
}