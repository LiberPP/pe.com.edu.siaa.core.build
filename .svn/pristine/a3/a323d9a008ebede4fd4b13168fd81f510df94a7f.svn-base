package pe.com.edu.siaa.core.ejb.dao.pago.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.Stateless;
import javax.persistence.Query;

import pe.com.edu.siaa.core.ejb.dao.generic.impl.GenericAcademicoDAOImpl;
import pe.com.edu.siaa.core.ejb.dao.pago.local.ControlPagoDaoLocal;
import pe.com.edu.siaa.core.model.dto.pago.ControlPagoDTO;
import pe.com.edu.siaa.core.model.jpa.pago.ControlPago;
import pe.com.edu.siaa.core.model.util.StringUtils;

/**
 * La Class ControlPagoDaoImpl.
 * <ul>
 * <li>Copyright 2017 ndavilal -
 * ndavilal. Todos los derechos reservados.</li>
 * </ul>
 *
 * @author ndavilal
 * @version 2.1, Tue Apr 18 19:53:43 COT 2017
 * @since SIAA-CORE 2.1
 */
@Stateless
public class ControlPagoDaoImpl extends  GenericAcademicoDAOImpl<String, ControlPago> implements ControlPagoDaoLocal  {

	
	@Override
	public String generarNumeroOperacion(Integer anho) throws Exception {
		Map<String, Object> parametros = new HashMap<String, Object>();
		String resultado = "0000000001";
		parametros.put("anho", anho);
		Query query = createQuery("select max(cc.nroCorrelativoOperacion) from ControlPago cc where YEAR(cc.fechaCreacion) =:anho",parametros);
		query.setParameter("anho", anho);
		List<String> listLong =  query.getResultList();
		if (listLong != null && listLong.size() > 0) {
			String ultimoIdGenerado = listLong.get(0);
			if (StringUtils.isNotNullOrBlank(ultimoIdGenerado)) {
				long ultimoId = Long.parseLong(ultimoIdGenerado.trim());
				ultimoId++;
				resultado = "" + ultimoId;
			}
		}
		resultado = StringUtils.completeLeft(resultado, '0', 10);
		return resultado;
	}
	//ID GENERADO:200510000001
	@Override
	public String generarIdControlPago(String idAnhoSemestre) throws Exception {
		Map<String, Object> parametros = new HashMap<String, Object>();
			String resultado = idAnhoSemestre + "0000001";
			parametros.put("idAnhoSemestre", idAnhoSemestre);
			Query query = createQuery("select max(cc.idControlPago) from ControlPago cc where cc.anhoSemestre.idAnhoSemestre=:idAnhoSemestre",parametros);
			query.setParameter("idAnhoSemestre", idAnhoSemestre);
			List<String> listLong =  query.getResultList();
			if (listLong != null && listLong.size() > 0) {
				String ultimoIdGenerado = listLong.get(0);
				if (StringUtils.isNotNullOrBlank(ultimoIdGenerado)) {
					long ultimoId = Long.parseLong(ultimoIdGenerado.trim());
					ultimoId++;
					resultado = "" + ultimoId;
				}
			}
			return resultado;
		}
		
    /* (non-Javadoc)
     * @see pe.com.edu.siaa.core.ejb.dao.seguridad.local.ControlPagoDaoLocal#listarControlPago(pe.com.edu.siaa.core.model.jpa.seguridad.ControlPago)
     */  
    @Override	 
    public List<ControlPago> listarControlPago(ControlPagoDTO controlPago) {
        Query query = generarQueryListaControlPago(controlPago, false);
        query.setFirstResult(controlPago.getStartRow());
        query.setMaxResults(controlPago.getOffset());
        return query.getResultList();
    }   
   
    /**
     * Generar query lista ControlPago.
     *
     * @param ControlPagoDTO el controlPago
     * @param esContador el es contador
     * @return the query
     */
    private Query generarQueryListaControlPago(ControlPagoDTO controlPago, boolean esContador) {
        Map<String, Object> parametros = new HashMap<String, Object>();
        StringBuilder jpaql = new StringBuilder();
        if (esContador) {
            jpaql.append(" select count(o.idControlPago) from ControlPago o where 1=1 ");
        } else {
            jpaql.append(" select o from ControlPago o left join fetch o.anhoSemestre left join fetch o.tipoDocSunat ");
            jpaql.append(" left join fetch o.itemByTipoMoneda  ");
            jpaql.append(" left join fetch o.cliente  where 1=1 ");        
        }
        jpaql.append(" and o.alumno.idAlumno = :idAlumno ");
        parametros.put("idAlumno", controlPago.getId());
        
		if (!StringUtils.isNullOrEmpty(controlPago.getSearch())) {
	          jpaql.append(" and upper(o.idControlPago) like :search ");
	          parametros.put("search", "%" + controlPago.getSearch().toUpperCase() + "%");
	    } else {
	    	if (!StringUtils.isNullOrEmpty(controlPago.getIdControlPago())) {
				jpaql.append(" and o.idControlPago = :idControlPago ");
				parametros.put("idControlPago", controlPago.getIdControlPago());
			}
			if (!StringUtils.isNullOrEmptyNumeric(controlPago.getTipoCambio())) {
				jpaql.append(" and o.tipoCambio = :tipoCambio ");
				parametros.put("tipoCambio", controlPago.getTipoCambio());
			}
			if (!StringUtils.isNullOrEmpty(controlPago.getNroDoc())) {
				jpaql.append(" and upper(o.nroDoc) like :nroDoc ");
				parametros.put("nroDoc", "%" + controlPago.getNroDoc().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmptyNumeric(controlPago.getIgv())) {
				jpaql.append(" and o.igv = :igv ");
				parametros.put("igv", controlPago.getIgv());
			}
			if (!StringUtils.isNullOrEmptyNumeric(controlPago.getSubMontoTotal())) {
				jpaql.append(" and o.subMontoTotal = :subMontoTotal ");
				parametros.put("subMontoTotal", controlPago.getSubMontoTotal());
			}
			if (!StringUtils.isNullOrEmptyNumeric(controlPago.getMontoTotal())) {
				jpaql.append(" and o.montoTotal = :montoTotal ");
				parametros.put("montoTotal", controlPago.getMontoTotal());
			}
			if (!StringUtils.isNullOrEmpty(controlPago.getFechaPago())) {
				jpaql.append(" and o.fechaPago = :fechaPago ");
				parametros.put("fechaPago", controlPago.getFechaPago());
			}
			if (!StringUtils.isNullOrEmpty(controlPago.getFechaCreacion())) {
				jpaql.append(" and o.fechaCreacion = :fechaCreacion ");
				parametros.put("fechaCreacion", controlPago.getFechaCreacion());
			}
			if (!StringUtils.isNullOrEmpty(controlPago.getUsuarioCreacion())) {
				jpaql.append(" and upper(o.usuarioCreacion) like :usuarioCreacion ");
				parametros.put("usuarioCreacion", "%" + controlPago.getUsuarioCreacion().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(controlPago.getFechaModificacion())) {
				jpaql.append(" and o.fechaModificacion = :fechaModificacion ");
				parametros.put("fechaModificacion", controlPago.getFechaModificacion());
			}
			if (!StringUtils.isNullOrEmpty(controlPago.getUsuarioModificacion())) {
				jpaql.append(" and upper(o.usuarioModificacion) like :usuarioModificacion ");
				parametros.put("usuarioModificacion", "%" + controlPago.getUsuarioModificacion().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(controlPago.getEstado())) {
				jpaql.append(" and upper(o.estado) like :estado ");
				parametros.put("estado", "%" + controlPago.getEstado().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(controlPago.getIp())) {
				jpaql.append(" and upper(o.ip) like :ip ");
				parametros.put("ip", "%" + controlPago.getIp().toUpperCase() + "%");
			}
		}
        if (!esContador) {
            jpaql.append(" ORDER BY o.fechaPago desc ");
        }
        Query query = createQuery(jpaql.toString(), parametros);
        return query;
    }

    /* (non-Javadoc)
     * @see pe.com.edu.siaa.core.ejb.dao.seguridad.local.ControlPagoDaoLocal#contarListar{entity.getClassName()}(pe.com.edu.siaa.core.model.jpa.seguridad.ControlPagoDTO)
     */
	@Override
    public int contarListarControlPago(ControlPagoDTO controlPago) {
        int resultado = 0;
        try {
            //StringBuilder jpaql = new StringBuilder();
            Query query = generarQueryListaControlPago(controlPago, true);
            resultado = ((Long) query.getSingleResult()).intValue();
        } catch (Exception e) {
            resultado = 0;
        }
        return resultado;
    }
    /* (non-Javadoc)
     * @see pe.com.edu.siaa.core.ejb.dao.seguridad.local.ControlPagoDaoLocal#generarIdControlPago()
     */
	 @Override
    public String generarIdControlPago() {
        String resultado = "1";
        Query query = createQuery("select max(o.idControlPago) from ControlPago o", null);
        List<Object> listLong =  query.getResultList();
        if (listLong != null && listLong.size() > 0 && listLong.get(0) != null)  {
            Long ultimoIdGenerado = Long.valueOf(listLong.get(0).toString());
            if (!StringUtils.isNullOrEmpty(ultimoIdGenerado)) {
                resultado = resultado + ultimoIdGenerado;
            }
        }
        return resultado;
    }
   
}