package pe.com.builderp.core.escalafon.ejb.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.Stateless;
import javax.persistence.Query;

import pe.com.builderp.core.escalafon.ejb.dao.local.ContratoAcademicoDaoLocal;
import pe.com.builderp.core.escalafon.model.dto.ContratoAcademicoDTO;
import pe.com.builderp.core.escalafon.model.jpa.ContratoAcademico;
import pe.com.edu.siaa.core.ejb.dao.generic.impl.GenericEscalafonDAOImpl;
import pe.com.edu.siaa.core.model.util.StringUtils;

/**
 * La Class ContratoAcademicoDaoImpl.
 * <ul>
 * <li>Copyright 2017 ndavilal -
 * ndavilal. Todos los derechos reservados.</li>
 * </ul>
 *
 * @author ndavilal
 * @version 2.1, Sun Dec 31 00:35:58 COT 2017
 * @since SIAA-CORE 2.1
 */
@Stateless
public class ContratoAcademicoDaoImpl extends  GenericEscalafonDAOImpl<String, ContratoAcademico> implements ContratoAcademicoDaoLocal  {

    /* (non-Javadoc)
     * @see pe.com.builderp.core.escalafon.ejb.dao.local.ContratoAcademicoDaoLocal#listarContratoAcademico(pe.com.builderp.core.escalafon.model.jpa.ContratoAcademico)
     */  
    @Override	 
    public List<ContratoAcademico> listarContratoAcademico(ContratoAcademicoDTO contratoAcademico) {
        Query query = generarQueryListaContratoAcademico(contratoAcademico, false);
        query.setFirstResult(contratoAcademico.getStartRow());
        query.setMaxResults(contratoAcademico.getOffset());
        return query.getResultList();
    }   
   
    /**
     * Generar query lista ContratoAcademico.
     *
     * @param ContratoAcademicoDTO el contratoAcademico
     * @param esContador el es contador
     * @return the query
     */
    private Query generarQueryListaContratoAcademico(ContratoAcademicoDTO contratoAcademico, boolean esContador) {
        Map<String, Object> parametros = new HashMap<String, Object>();
        StringBuilder jpaql = new StringBuilder();
        if (esContador) {
            jpaql.append(" select count(o.idContratoAcademico) from ContratoAcademico o where 1=1 ");
        } else {
            jpaql.append(" select o from ContratoAcademico o where 1=1 ");           
        }
		if (!StringUtils.isNullOrEmpty(contratoAcademico.getSearch())) {
	          jpaql.append(" and upper(o.idContratoAcademico) like :search ");
	          parametros.put("search", "%" + contratoAcademico.getSearch().toUpperCase() + "%");
	    } else {
			if (!StringUtils.isNullOrEmpty(contratoAcademico.getClasePregrado())) {
				jpaql.append(" and upper(o.clasePregrado) like :clasePregrado ");
				parametros.put("clasePregrado", "%" + contratoAcademico.getClasePregrado().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(contratoAcademico.getClaseMaestria())) {
				jpaql.append(" and upper(o.claseMaestria) like :claseMaestria ");
				parametros.put("claseMaestria", "%" + contratoAcademico.getClaseMaestria().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(contratoAcademico.getClaseDoctorado())) {
				jpaql.append(" and upper(o.claseDoctorado) like :claseDoctorado ");
				parametros.put("claseDoctorado", "%" + contratoAcademico.getClaseDoctorado().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmptyNumeric(contratoAcademico.getHoraClase())) {
				jpaql.append(" and o.horaClase = :horaClase ");
				parametros.put("horaClase", contratoAcademico.getHoraClase());
			}
			if (!StringUtils.isNullOrEmptyNumeric(contratoAcademico.getHoraOtraActividad())) {
				jpaql.append(" and o.horaOtraActividad = :horaOtraActividad ");
				parametros.put("horaOtraActividad", contratoAcademico.getHoraOtraActividad());
			}
			if (!StringUtils.isNullOrEmpty(contratoAcademico.getFechaCreacion())) {
				jpaql.append(" and o.fechaCreacion = :fechaCreacion ");
				parametros.put("fechaCreacion", contratoAcademico.getFechaCreacion());
			}
			if (!StringUtils.isNullOrEmpty(contratoAcademico.getUsuarioCreacion())) {
				jpaql.append(" and upper(o.usuarioCreacion) like :usuarioCreacion ");
				parametros.put("usuarioCreacion", "%" + contratoAcademico.getUsuarioCreacion().toUpperCase() + "%");
			}
		}
        if (!esContador) {
            //jpaql.append(" ORDER BY 1 ");
        }
        Query query = createQuery(jpaql.toString(), parametros);
        return query;
    }

    /* (non-Javadoc)
     * @see pe.com.builderp.core.escalafon.ejb.dao.local.ContratoAcademicoDaoLocal#contarListar{entity.getClassName()}(pe.com.builderp.core.escalafon.model.jpa.ContratoAcademicoDTO)
     */
	@Override
    public int contarListarContratoAcademico(ContratoAcademicoDTO contratoAcademico) {
        int resultado = 0;
        try {
            //StringBuilder jpaql = new StringBuilder();
            Query query = generarQueryListaContratoAcademico(contratoAcademico, true);
            resultado = ((Long) query.getSingleResult()).intValue();
        } catch (Exception e) {
            resultado = 0;
        }
        return resultado;
    }
    /* (non-Javadoc)
     * @see pe.com.builderp.core.escalafon.ejb.dao.local.ContratoAcademicoDaoLocal#generarIdContratoAcademico()
     */
	 @Override
    public String generarIdContratoAcademico() {
        String resultado = "1";
        Query query = createQuery("select max(o.idContratoAcademico) from ContratoAcademico o", null);
        List<Object> listLong =  query.getResultList();
        if (listLong != null && listLong.size() > 0 && listLong.get(0) != null)  {
            Long ultimoIdGenerado = Long.valueOf(listLong.get(0).toString());
            if (!StringUtils.isNullOrEmpty(ultimoIdGenerado)) {
                resultado = resultado + ultimoIdGenerado;
            }
        }
        return resultado;
    }
   
}