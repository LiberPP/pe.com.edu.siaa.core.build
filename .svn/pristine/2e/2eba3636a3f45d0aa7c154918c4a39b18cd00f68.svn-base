package pe.com.edu.siaa.core.ejb.seguridad.jwt.rsa.util.filters;

import java.io.IOException;

import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.container.PreMatching;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.Provider;

import pe.com.edu.siaa.core.ejb.seguridad.jwt.rsa.util.AppHTTPHeaderNames;
import pe.com.edu.siaa.core.ejb.util.cache.AppAuthenticator;
import pe.com.edu.siaa.core.ejb.util.log.Logger;

@Provider
@PreMatching
public class RESTCorsDemoRequestFilter implements ContainerRequestFilter {

    private final static Logger log = Logger.getLogger( RESTCorsDemoRequestFilter.class.getName() );

    @Override
    public void filter( ContainerRequestContext requestCtx ) throws IOException {
        //log.info( "Executing REST request filter" );
        String path = requestCtx.getUriInfo().getPath();
        log.info( "Filtering request path: " + path );

        // When HttpMethod comes as OPTIONS, just acknowledge that it accepts...
        if ( requestCtx.getRequest().getMethod().equals( "OPTIONS" ) ) {
            log.info( "HTTP Method (OPTIONS) - Detected!" );
            // Just send a OK signal back to the browser
            /*requestCtx.abortWith( Response.status( Response.Status.OK ).build() );
             * */
        } else {
	        // Then check is the service key exists and is valid.
	        AppAuthenticator demoAuthenticator = AppAuthenticator.getInstance();
	        String serviceKey = requestCtx.getHeaderString( AppHTTPHeaderNames.SERVICE_KEY );
	        if ( !demoAuthenticator.isServiceKeyValid( serviceKey ) ) {
	            // Kick anyone without a valid service key
	            /*requestCtx.abortWith( Response.status( Response.Status.UNAUTHORIZED ).build() ); 
	            return;*/
	        }
	        // For any pther methods besides login, the authToken must be verified
	        if ( !path.startsWith( "/loginRestController" )  && !path.startsWith( "/propertiesRestController" ) ) {
	            String authToken = requestCtx.getHeaderString( AppHTTPHeaderNames.AUTH_TOKEN ); 
	            // if it isn't valid, just kick them out.
	            if ( !demoAuthenticator.isAuthTokenValid( serviceKey, authToken ) ) {
	                requestCtx.abortWith( Response.status( Response.Status.UNAUTHORIZED ).build() );
	            }
	        }
      }
    }
}