package pe.com.edu.siaa.core.ejb.service.rest.admision.impl;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;

import pe.com.edu.siaa.core.ejb.factory.TransferDataObjectUtil;
import pe.com.edu.siaa.core.ejb.service.admision.local.AdmisionServiceLocal;
import pe.com.edu.siaa.core.ejb.service.rest.impl.GenericServiceRestImpl;
import pe.com.edu.siaa.core.model.dto.admision.AnhoSemestreDTO;
import pe.com.edu.siaa.core.model.estate.EstadoAnhoSemestreState;
import pe.com.edu.siaa.core.model.type.AccionType;
import pe.com.edu.siaa.core.vo.ResultadoRestVO;


/**
 * La Class AnhoSemestreRestController.
 * <ul>
 * <li>Copyright 2017 ndavilal -
 * ndavilal. Todos los derechos reservados.</li>
 * </ul>
 *
 * @author ndavilal
 * @version 2.1, Tue Apr 18 13:43:25 COT 2017
 * @since SIAA-CORE 2.1
 */
@Stateless
@Path("/anhoSemestreRestController")
@Consumes(MediaType.APPLICATION_JSON )
@Produces(MediaType.APPLICATION_JSON)
public class AnhoSemestreRestController extends GenericServiceRestImpl {
 
	@EJB
	private transient AdmisionServiceLocal admisionServiceLocal;
	
	@POST
	public ResultadoRestVO<AnhoSemestreDTO> crear(AnhoSemestreDTO anhoSemestre) throws Exception {
		return controladorAccion(anhoSemestre,AccionType.CREAR);
	}
	@PUT
	public ResultadoRestVO<AnhoSemestreDTO> modificar(AnhoSemestreDTO anhoSemestre) throws Exception {
		return controladorAccion(anhoSemestre,AccionType.MODIFICAR);
	}
	@DELETE
	@Path("/{id}")
	public ResultadoRestVO<AnhoSemestreDTO> eliminar(@PathParam("id") String idAnhoSemestre) throws Exception {
		AnhoSemestreDTO anhoSemestre = new AnhoSemestreDTO();
		anhoSemestre.setIdAnhoSemestre(idAnhoSemestre);		
		return controladorAccion(anhoSemestre,AccionType.ELIMINAR);
	}
	private ResultadoRestVO<AnhoSemestreDTO> controladorAccion(AnhoSemestreDTO anhoSemestre, AccionType accionType){
		ResultadoRestVO<AnhoSemestreDTO> resultado = new ResultadoRestVO<AnhoSemestreDTO>();
		 try {
    		resultado.setObjetoResultado(admisionServiceLocal.controladorAccionAnhoSemestre(anhoSemestre,accionType));
		} catch (Exception e) {
			parsearResultadoError(e, resultado);
		}
		return resultado;
	}
	@GET
	@Path("/get/{id}")
	public ResultadoRestVO<AnhoSemestreDTO> finById(@PathParam("id") String idAnhoSemestre) throws Exception {
		AnhoSemestreDTO anhoSemestre = new AnhoSemestreDTO();
		anhoSemestre.setIdAnhoSemestre(idAnhoSemestre);
		return controladorAccion(anhoSemestre,AccionType.FIND_BY_ID);
	}
	
	@GET
    @Path("/listar")
	public ResultadoRestVO<AnhoSemestreDTO> listarAnhoSemestre(@Context UriInfo info){
		ResultadoRestVO<AnhoSemestreDTO> resultado = new ResultadoRestVO<AnhoSemestreDTO>();
		AnhoSemestreDTO anhoSemestre = transferUriInfo(info);
		 try {
    		resultado.setListaResultado(admisionServiceLocal.listarAnhoSemestre(anhoSemestre));
		} catch (Exception e) {
			parsearResultadoError(e, resultado);
		}
		return resultado;
	}
	@GET
    @Path("/contar")
	public ResultadoRestVO<AnhoSemestreDTO> contarListarAnhoSemestre(@Context UriInfo info){
		ResultadoRestVO<AnhoSemestreDTO> resultado = new ResultadoRestVO<AnhoSemestreDTO>();
		AnhoSemestreDTO anhoSemestre = transferUriInfo(info);
		 try {
    		resultado.setContador(admisionServiceLocal.contarListarAnhoSemestre(anhoSemestre));
    		if (resultado.isData()) {
    			resultado.setListaResultado(admisionServiceLocal.listarAnhoSemestre(anhoSemestre));
    		}
		} catch (Exception e) {
			parsearResultadoError(e, resultado);
		}
		return resultado;
	}
	@GET
    @Path("/")
	public ResultadoRestVO<AnhoSemestreDTO> inicializarAnhoSemestre(@Context UriInfo info) throws Exception {
	     AnhoSemestreDTO anhoSemestre = transferUriInfo(info);
		 ResultadoRestVO<AnhoSemestreDTO> resultado = new ResultadoRestVO<AnhoSemestreDTO>();
		 try {
    		resultado.setObjetoResultado(anhoSemestre);
		} catch (Exception e) {
			parsearResultadoError(e, resultado);
		}
		return resultado;
	}
	@GET
    @Path("/obtenerAnhoSemestreByEstado")
	public ResultadoRestVO<AnhoSemestreDTO> obtenerAnhoSemestreByEstado(@Context UriInfo info) throws Exception {
	     AnhoSemestreDTO anhoSemestre = transferUriInfo(info);
		 ResultadoRestVO<AnhoSemestreDTO> resultado = new ResultadoRestVO<AnhoSemestreDTO>();
		 try {
    		EstadoAnhoSemestreState estadoAnhoSemestreState = EstadoAnhoSemestreState.get(anhoSemestre.getEstado());
			resultado.setObjetoResultado(admisionServiceLocal.obtenerAnhoSemestreByEstado(estadoAnhoSemestreState ));
		} catch (Exception e) {
			parsearResultadoError(e, resultado);
		}
		return resultado;
	}
	private AnhoSemestreDTO transferUriInfo(@Context UriInfo info) {
		AnhoSemestreDTO resultado = TransferDataObjectUtil.transferObjetoEntityGetRestDTO(info,AnhoSemestreDTO.class);
		return resultado;
	}
}