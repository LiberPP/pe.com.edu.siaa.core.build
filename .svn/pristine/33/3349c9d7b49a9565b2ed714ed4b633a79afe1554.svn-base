package pe.com.edu.siaa.core.ejb.dao.admision.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.Stateless;
import javax.persistence.Query;

import pe.com.edu.siaa.core.ejb.dao.admision.local.EstablecimientoDaoLocal;
import pe.com.edu.siaa.core.ejb.dao.generic.impl.GenericAcademicoDAOImpl;
import pe.com.edu.siaa.core.model.dto.admision.EstablecimientoDTO;
import pe.com.edu.siaa.core.model.jpa.admision.Establecimiento;
import pe.com.edu.siaa.core.model.util.StringUtils;

/**
 * La Class EstablecimientoDaoImpl.
 * <ul>
 * <li>Copyright 2017 ndavilal -
 * ndavilal. Todos los derechos reservados.</li>
 * </ul>
 *
 * @author ndavilal
 * @version 2.1, Tue Apr 18 19:53:39 COT 2017
 * @since SIAA-CORE 2.1
 */
@Stateless
public class EstablecimientoDaoImpl extends  GenericAcademicoDAOImpl<Long, Establecimiento> implements EstablecimientoDaoLocal  {

    /* (non-Javadoc)
     * @see pe.com.edu.siaa.core.ejb.dao.seguridad.local.EstablecimientoDaoLocal#listarEstablecimiento(pe.com.edu.siaa.core.model.jpa.seguridad.Establecimiento)
     */  
    @Override	 
    public List<Establecimiento> listarEstablecimiento(EstablecimientoDTO establecimiento) {
        Query query = generarQueryListaEstablecimiento(establecimiento, false);
        query.setFirstResult(establecimiento.getStartRow());
        query.setMaxResults(establecimiento.getOffset());
        return query.getResultList();
    }   
   
    /**
     * Generar query lista Establecimiento.
     *
     * @param EstablecimientoDTO el establecimiento
     * @param esContador el es contador
     * @return the query
     */
    private Query generarQueryListaEstablecimiento(EstablecimientoDTO establecimiento, boolean esContador) {
        Map<String, Object> parametros = new HashMap<String, Object>();
        StringBuilder jpaql = new StringBuilder();
        if (esContador) {
            jpaql.append(" select count(o.idEstablecimiento) from Establecimiento o where 1=1 ");
        } else {
            jpaql.append(" select o from Establecimiento o left join fetch o.universidad left join fetch o.itemByTipoInfraestructura left join fetch o.ubigeo left join fetch o.itemByZona left join fetch o.itemByTipoVia where 1=1 ");           
        }
		if (!StringUtils.isNullOrEmpty(establecimiento.getSearch())) {
	          jpaql.append(" and upper(o.nombre) like :search ");
	          parametros.put("search", "%" + establecimiento.getSearch().toUpperCase() + "%");
	    } else {
			if (!StringUtils.isNullOrEmpty(establecimiento.getCodigoEstablecimiento())) {
				jpaql.append(" and upper(o.codigoEstablecimiento) like :codigoEstablecimiento ");
				parametros.put("codigoEstablecimiento", "%" + establecimiento.getCodigoEstablecimiento().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(establecimiento.getNombre())) {
				jpaql.append(" and upper(o.nombre) like :nombre ");
				parametros.put("nombre", "%" + establecimiento.getNombre().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(establecimiento.getAbreviatura())) {
				jpaql.append(" and upper(o.abreviatura) like :abreviatura ");
				parametros.put("abreviatura", "%" + establecimiento.getAbreviatura().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(establecimiento.getNombreZona())) {
				jpaql.append(" and upper(o.nombreZona) like :nombreZona ");
				parametros.put("nombreZona", "%" + establecimiento.getNombreZona().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(establecimiento.getNombreTipoVia())) {
				jpaql.append(" and upper(o.nombreTipoVia) like :nombreTipoVia ");
				parametros.put("nombreTipoVia", "%" + establecimiento.getNombreTipoVia().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmptyNumeric(establecimiento.getNumero())) {
				jpaql.append(" and o.numero = :numero ");
				parametros.put("numero", establecimiento.getNumero());
			}
			if (!StringUtils.isNullOrEmptyNumeric(establecimiento.getKilometro())) {
				jpaql.append(" and o.kilometro = :kilometro ");
				parametros.put("kilometro", establecimiento.getKilometro());
			}
			if (!StringUtils.isNullOrEmpty(establecimiento.getManzana())) {
				jpaql.append(" and upper(o.manzana) like :manzana ");
				parametros.put("manzana", "%" + establecimiento.getManzana().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(establecimiento.getLote())) {
				jpaql.append(" and upper(o.lote) like :lote ");
				parametros.put("lote", "%" + establecimiento.getLote().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(establecimiento.getTelefono1())) {
				jpaql.append(" and upper(o.telefono1) like :telefono1 ");
				parametros.put("telefono1", "%" + establecimiento.getTelefono1().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(establecimiento.getTelefono2())) {
				jpaql.append(" and upper(o.telefono2) like :telefono2 ");
				parametros.put("telefono2", "%" + establecimiento.getTelefono2().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(establecimiento.getEmail())) {
				jpaql.append(" and upper(o.email) like :email ");
				parametros.put("email", "%" + establecimiento.getEmail().toUpperCase() + "%");
			}
			if (!StringUtils.isNullOrEmpty(establecimiento.getEmailAlternativo())) {
				jpaql.append(" and upper(o.emailAlternativo) like :emailAlternativo ");
				parametros.put("emailAlternativo", "%" + establecimiento.getEmailAlternativo().toUpperCase() + "%");
			}
		}
        if (!esContador) {
            //jpaql.append(" ORDER BY 1 ");
        }
        Query query = createQuery(jpaql.toString(), parametros);
        return query;
    }

    /* (non-Javadoc)
     * @see pe.com.edu.siaa.core.ejb.dao.seguridad.local.EstablecimientoDaoLocal#contarListar{entity.getClassName()}(pe.com.edu.siaa.core.model.jpa.seguridad.EstablecimientoDTO)
     */
	@Override
    public int contarListarEstablecimiento(EstablecimientoDTO establecimiento) {
        int resultado = 0;
        try {
            //StringBuilder jpaql = new StringBuilder();
            Query query = generarQueryListaEstablecimiento(establecimiento, true);
            resultado = ((Long) query.getSingleResult()).intValue();
        } catch (Exception e) {
            resultado = 0;
        }
        return resultado;
    }
    /* (non-Javadoc)
     * @see pe.com.edu.siaa.core.ejb.dao.seguridad.local.EstablecimientoDaoLocal#generarIdEstablecimiento()
     */
	 @Override
    public Long generarIdEstablecimiento() {
        Long resultado = 1L;
        Query query = createQuery("select max(o.idEstablecimiento) from Establecimiento o", null);
        List<Object> listLong =  query.getResultList();
        if (listLong != null && listLong.size() > 0 && listLong.get(0) != null)  {
            Long ultimoIdGenerado = Long.valueOf(listLong.get(0).toString());
            if (!StringUtils.isNullOrEmpty(ultimoIdGenerado)) {
                resultado = resultado + ultimoIdGenerado;
            }
        }
        return resultado;
    }
   
}